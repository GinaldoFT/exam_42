Nome do exercício: ft_scanf
Arquivos esperados: ft_scanf.c
Funções permitidas: fgetc, ungetc, ferror, feof, isspace, isdigit, stdin, va_start, va_arg, va_copy, va_end

Escreva uma função chamada ft_scanf que irá imitar o scanf real com as seguintes restrições:

    Ela deve tratar apenas as seguintes conversões: s, d e c

    Você não precisa tratar as opções *, m e '

    Você não precisa tratar o tamanho máximo do campo

    Você não precisa tratar os modificadores de tipo (como h, hh, l, etc.)

    Você não precisa tratar as conversões que começam com %n$

Sua função deve ser declarada da seguinte forma:

int ft_scanf(const char *, ... );

Você encontrará neste diretório um arquivo contendo parte do código necessário. Basta completá-lo.

Para testar seu programa, compare seus resultados com os do scanf real.

Dica: Você pode precisar ler a man page do scanf.

#include <stdarg.h>
#include <stdio.h>
#include <ctype.h>

int match_space(FILE *f)
{
        // Você pode inserir código aqui
    return (0);
}

int match_char(FILE *f, char c)
{
        // Você pode inserir código aqui
    return (0);
}

int scan_char(FILE *f, va_list ap)
{
        // Você pode inserir código aqui
    return (0);
}

int scan_int(FILE *f, va_list ap)
{
        // Você pode inserir código aqui
    return (0);
}

int scan_string(FILE *f, va_list ap)
{
        // Você pode inserir código aqui
    return (0);
}

int match_conv(FILE *f, const char **format, va_list ap)
{
	switch (**format)
	{
		case 'c':
			return scan_char(f, ap);
		case 'd':
			match_space(f);
			return scan_int(f, ap);
		case 's':
			match_space(f);
			return scan_string(f, ap);
		case EOF:
			return -1;
		default:
			return -1;
	}
}

int ft_vfscanf(FILE *f, const char *format, va_list ap)
{
	int nconv = 0;

	int c = fgetc(f);
	if (c == EOF)
		return EOF;
	ungetc(c, f);

	while (*format)
	{
		if (*format == '%')
		{
			format++;
			if (match_conv(f, &format, ap) != 1)
				break;
			else
				nconv++;
		}
		else if (isspace(*format))
		{
			if (match_space(f) == -1)
				break;
		}
		else if (match_char(f, *format) != 1)
			break;
		format++;
	}
	
	if (ferror(f))
		return EOF;
	return nconv;
}

int ft_scanf(const char *format, ...)
{
	// ...
	int ret = ft_vfscanf(stdin, format, ap);
	// ...
	return ret;
}
